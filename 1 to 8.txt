
LINEAR SEARCH:-
package Dsa; 
public class LinearSearch {
 
		public static int search(int arr[], int N, int x) 
		{ 
			for (int i = 0; i < N; i++) { 
				if (arr[i] == x) 
					return i; 
			} 
			return -1; 
		} 

		public static void main(String args[]) 
		{ 
			int arr[] = { 25, 38, 40, 100, 47, 89, 56, 77 }; 
			int x = 100; 

			// Function call 
			int result = search(arr, arr.length, x); 
			if (result == -1) 
				System.out.print( 
					"Element is not present in array"); 
			else
				System.out.print("Element is present at index "
								+ result); 
		} 
	}


BINARY SEARCH:-
package Dsa;

public class BinarySearch {
int binarySearch(int array[], int x, int low, int high) {

 if (high >= low) {
   int mid = low + (high - low) / 2;

   // If found at mid, then return it
   if (array[mid] == x)
     return mid;

   // Search the left half
   if (array[mid] > x)
     return binarySearch(array, x, low, mid - 1);

   // Search the right half
   return binarySearch(array, x, mid + 1, high);
 }

 return -1;
}

public static void main(String args[]) {
 BinarySearch ob = new BinarySearch();
 int array[] = { 30, 24, 5, 6, 70, 8, 93 };
 int n = array.length;
 int x = 8;
 int result = ob.binarySearch(array, x, 0, n - 1);
 if (result == -1)
   System.out.println("Element Not found");
 else
   System.out.println("Element found at index " + result);
}
}


EXPONENTIAL SEARCH:-

package Dsa;
public class ExponentialSearch {

	    boolean exponentialSearch(int arr[], int key) {

	        int lengthOfArray = arr.length;

	        if (arr[0] == key) { // Checking whether first element is the key 
	            return true;
	        }

	        // Finding the range in which the element might be present

	        int i = 1;

	        while (i < lengthOfArray && arr[i] <= key) {
	            i = i * 2; // Exponentially increasing value of i.

	        }

	        return binarySearch(arr, i / 2, Math.min(i, lengthOfArray - 1), key); // calling binary search method on the sub-array

	    }

	    boolean binarySearch(int arr[], int low, int high, int key) {

	        int mid; // to store middle element

	        while (low <= high) {

	            mid = (low + high) / 2; // we can also do mid = low+(high-low)/2 to avoid overflow in some cases

	            if (arr[mid] == key) {
	                return true;
	            } else if (arr[mid] < key) {
	                low = mid + 1;
	            } else {
	                high = mid - 1;
	            }
	        }
	        return false;
	    }

	    // Driver Code

	    public static void main(String[] args) {

	    	ExponentialSearch search = new ExponentialSearch();

	        int arr[] = {
	            1,
	            3,
	            4,
	            6,
	            8,
	            20,
	            15,
	            24
	        };

	        if (search.exponentialSearch(arr, 20)) {
	            System.out.println("Element found !");
	        } else {
	            System.out.println("Element not found ");
	        }

	    }
	}


SELECTION SORT:-

package Dsa;
public class SelectionSort {
	    public static void selectionSort(int[] arr){  
	        for (int i = 0; i < arr.length - 1; i++)  
	        {  
	            int index = i;  
	            for (int j = i + 1; j < arr.length; j++){  
	                if (arr[j] < arr[index]){  
	                    index = j;//searching for lowest index  
	                }  
	            }  
	            int smallerNumber = arr[index];   
	            arr[index] = arr[i];  
	            arr[i] = smallerNumber;  
	        }  
	    }  
	       
	    public static void main(String a[]){  
	        int[] arr1 = {90,33,67,22,13,10,58,29};  
	        System.out.println("Before Selection Sort");  
	        for(int i:arr1){  
	            System.out.print(i+" ");  
	        }  
	        System.out.println();  
	          
	        selectionSort(arr1);//sorting array using selection sort  
	         
	        System.out.println("After Selection Sort");  
	        for(int i:arr1){  
	            System.out.print(i+" ");  
	        }  
	    }  
	}  


BUBBLE SORT:-
package Dsa;

public class BubbleSort {
	public static void main(String[] args) {
        int[] arr = {60, 3, 5, 112, 92,78, 90};

        bubbleSort(arr);

        System.out.println("Sorted array:");
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            // If no two elements were swapped in the inner loop, the array is already sorted
            if (!swapped) {
                break;
            }
        }
    }
}

INSERTION SORT:-
package Dsa;
public class InsertionSort {
	public static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        int[] arr = {10, 55, 83, 79, 6};
        
        System.out.println("Original array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }

        insertionSort(arr);

        System.out.println("\nSorted array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

MERGE SORT:-
package Dsa;
public class MergeSort {
	public static void merge(int[] arr, int left, int middle, int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        for (int i = 0; i < n1; i++) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArr[j] = arr[middle + 1 + j];
        }

        int i = 0, j = 0;
        int k = left;

        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int middle = left + (right - left) / 2;

            mergeSort(arr, left, middle);
            mergeSort(arr, middle + 1, right);

            merge(arr, left, middle, right);
        }
    }

    public static void main(String[] args) {
        int[] arr = {130, 121, 139, 15, 167, 79};

        System.out.println("Original array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }

        mergeSort(arr, 0, arr.length - 1);

        System.out.println("\nSorted array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

QUICK SORT:-

package Dsa;
import java.util.Arrays;
public class QuickSort {
	public static void main(String[] args) {
        int[] arr = {51, 72, 29, 3, 16};
        quickSort(arr, 0, arr.length - 1);
        System.out.println("Sorted Array: " + Arrays.toString(arr));
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }
}




	

